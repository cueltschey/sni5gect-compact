#ifndef EXPLOIT_H
#define EXPLOIT_H
#include "shadower/hdr/constants.h"
#include "shadower/hdr/safe_queue.h"
#include "srsran/srslog/srslog.h"
#include "wdissector.h"
#include <memory>
#include <vector>
class Exploit
{
public:
  Exploit(SafeQueue<std::vector<uint8_t> >& dl_buffer_queue_, SafeQueue<std::vector<uint8_t> >& ul_buffer_queue_) :
    dl_buffer_queue(dl_buffer_queue_), ul_buffer_queue(ul_buffer_queue_)
  {
  }

  virtual void setup() = 0;

  virtual void pre_dissection(wd_t* wd) = 0;

  virtual void post_dissection(wd_t*                 wd,
                               uint8_t*              buffer,
                               uint32_t              len,
                               uint8_t*              raw_buffer,
                               uint32_t              raw_buffer_len,
                               direction_t           direction,
                               uint32_t              slot_idx,
                               srslog::basic_logger& logger) = 0;

protected:
  SafeQueue<std::vector<uint8_t> >& dl_buffer_queue;
  SafeQueue<std::vector<uint8_t> >& ul_buffer_queue;
};

using create_exploit_t = Exploit* (*)(SafeQueue<std::vector<uint8_t> >&, SafeQueue<std::vector<uint8_t> >&);

create_exploit_t load_exploit(std::string& filename);

#endif // EXPLOIT_H