#include "lib/src/phy/fec/ldpc/ldpc_dec_all.h"
#include "srsran/phy/fec/ldpc/ldpc_decoder.h"
#include "srsran/phy/phch/sch_nr.h"
#include <chrono>
#include <iostream>

// static int decode_c_avx2long(void* o, const int8_t* llrs, uint8_t* message, uint32_t cdwd_rm_length, srsran_crc_t*
// crc)
int decode_c_avx2long(srsran_ldpc_decoder_t* q,
                      const int8_t*          llrs,
                      uint8_t*               message,
                      uint32_t               cdwd_rm_length,
                      srsran_crc_t*          crc)
{
  /* it must be smaller than the codeword size */
  if (cdwd_rm_length > q->liftN - 2 * q->ls) {
    cdwd_rm_length = q->liftN - 2 * q->ls;
  } /* We need at least q->bgK + 4 variable nodes to cover the high-rate region. However,*/ /* 2 variable nodes are
                                                                                               systematically punctured
                                                                                               by the encoder. */
  if (cdwd_rm_length <
      (q->bgK + 2) *
          q->ls) { /* ERROR("The rate-matched codeword should have a length at least equal to the high-rate region.");*/
    cdwd_rm_length = (q->bgK + 2) * q->ls; /* return -1;*/
  }
  if (cdwd_rm_length % q->ls) {
    cdwd_rm_length = (cdwd_rm_length / q->ls + 1) * q->ls;
    /* ERROR("The rate-matched codeword length should be a multiple of the lifting size."); */ /* return
                                                                                                  -1;*/
  }

  auto start = std::chrono::high_resolution_clock::now();
  init_ldpc_dec_c_avx2long(q->ptr, llrs, q->ls);
  auto end = std::chrono::high_resolution_clock::now();
  std::cout << "init_ldpc_dec_c_avx2long: "
            << std::chrono::duration_cast<std::chrono::microseconds>(end - start).count() << " us" << std::endl;

  uint16_t* this_pcm                   = NULL;
  int8_t(*these_var_indices)[MAX_CNCT] = NULL;

  /* When computing the number of layers, we need to recall that the standard always removes */ /* the first two
                                                                                                   variable nodes
                                                                                                   from the final
                                                                                                   codeword.*/
  uint8_t n_layers = cdwd_rm_length / q->ls - q->bgK + 2;

  for (int i_iteration = 0; i_iteration < q->max_nof_iter; i_iteration++) {
    for (int i_layer = 0; i_layer < n_layers; i_layer++) {
      auto start1 = std::chrono::high_resolution_clock::now();
      update_ldpc_var_to_check_c_avx2long(q->ptr, i_layer);
      auto end1 = std::chrono::high_resolution_clock::now();
      std::cout << "update_ldpc_var_to_check_c_avx2long: "
                << std::chrono::duration_cast<std::chrono::microseconds>(end1 - start1).count() << " us" << std::endl;

      this_pcm          = q->pcm + i_layer * q->bgN;
      these_var_indices = q->var_indices + i_layer;

      auto start2 = std::chrono::high_resolution_clock::now();
      update_ldpc_check_to_var_c_avx2long(q->ptr, i_layer, this_pcm, these_var_indices);
      auto end2 = std::chrono::high_resolution_clock::now();
      std::cout << "update_ldpc_check_to_var_c_avx2long: "
                << std::chrono::duration_cast<std::chrono::microseconds>(end2 - start2).count() << " us" << std::endl;

      auto start3 = std::chrono::high_resolution_clock::now();
      update_ldpc_soft_bits_c_avx2long(q->ptr, i_layer, these_var_indices);
      auto end3 = std::chrono::high_resolution_clock::now();
      std::cout << "update_ldpc_soft_bits_c_avx2long: "
                << std::chrono::duration_cast<std::chrono::microseconds>(end3 - start3).count() << " us" << std::endl;
    }

    if (crc != NULL) {
      auto start4 = std::chrono::high_resolution_clock::now();
      extract_ldpc_message_c_avx2long(q->ptr, message, q->liftK);
      auto end4 = std::chrono::high_resolution_clock::now();
      std::cout << "extract_ldpc_message_c_avx2long: "
                << std::chrono::duration_cast<std::chrono::microseconds>(end4 - start4).count() << " us" << std::endl;

      auto start5 = std::chrono::high_resolution_clock::now();
      if (srsran_crc_match(crc, message, q->liftK - crc->order)) {
        auto end5 = std::chrono::high_resolution_clock::now();
        std::cout << "srsran_crc_match: "
                  << std::chrono::duration_cast<std::chrono::microseconds>(end5 - start5).count() << " us" << std::endl;
        return i_iteration + 1;
      }
    }
  }

  /* If reached here, and CRC is being checked, it has failed */
  if (crc != NULL) {
    return 0;
  }

  auto start6 = std::chrono::high_resolution_clock::now();
  /* Without CRC, extract message and return the maximum number of iterations */
  extract_ldpc_message_c_avx2long(q->ptr, message, q->liftK);
  auto end6 = std::chrono::high_resolution_clock::now();
  std::cout << "extract_ldpc_message_c_avx2long: "
            << std::chrono::duration_cast<std::chrono::microseconds>(end6 - start6).count() << " us" << std::endl;
  return q->max_nof_iter;
}

int main()
{
  srsran_sch_nr_t      q      = {};
  srsran_sch_nr_args_t args   = {};
  args.disable_simd           = false;
  args.decoder_use_flooded    = false;
  args.decoder_scaling_factor = 0;
  args.max_nof_iter           = 10;

  srsran_carrier_nr_t carrier    = {};
  carrier.pci                    = 1;
  carrier.dl_center_frequency_hz = 3427500000;
  carrier.ul_center_frequency_hz = 3427500000;
  carrier.ssb_center_freq_hz     = 3413280000;
  carrier.offset_to_carrier      = 0;
  carrier.scs                    = srsran_subcarrier_spacing_30kHz;
  carrier.nof_prb                = 106;
  carrier.start                  = 0;
  carrier.max_mimo_layers        = 1;

  if (srsran_sch_nr_init_rx(&q, &args) < SRSRAN_SUCCESS) {
    std::cout << "Failed to initialize SCH" << std::endl;
    return -1;
  }

  if (srsran_sch_nr_set_carrier(&q, &carrier) < SRSRAN_SUCCESS) {
    std::cout << "Failed to set carrier" << std::endl;
    return -1;
  }

  srsran_ldpc_decoder_t* decoder = q.decoder_bg2[88];
  if (decoder == NULL) {
    std::cout << "Failed to get decoder" << std::endl;
    return -1;
  }

  srsran_crc_t* crc_tb = &q.crc_tb_16;
  if (crc_tb == NULL) {
    std::cout << "Failed to get CRC" << std::endl;
    return -1;
  }

  int n_llr = 2160;

  int8_t rm_buffer[] = {
      18,  20,  19,  19,  19,  20,  19,  20,  19,  -19, 20,  19,  -20, -19, 19,  -19, 19,  18,  -19, 19,  19,  20,  19,
      19,  20,  18,  -20, 19,  19,  21,  19,  19,  19,  -20, 20,  -20, 19,  19,  -20, 19,  19,  -20, -19, -19, -20, -19,
      19,  20,  20,  20,  20,  20,  -19, -19, 19,  19,  -19, -19, -20, 20,  20,  20,  19,  -19, -20, 19,  20,  -19, 19,
      -18, -20, 19,  19,  -21, -19, 20,  19,  20,  21,  -20, -19, 20,  -19, -20, 20,  19,  -19, -19, 20,  -19, -19, -20,
      20,  19,  18,  20,  19,  -20, 19,  20,  19,  19,  20,  20,  19,  20,  -20, 19,  20,  19,  20,  20,  19,  20,  19,
      20,  20,  19,  20,  21,  20,  19,  20,  19,  19,  18,  20,  20,  -19, 20,  19,  19,  20,  20,  19,  20,  -19, 21,
      21,  20,  20,  19,  19,  19,  19,  19,  19,  19,  20,  19,  20,  19,  19,  -19, 20,  20,  20,  19,  20,  -21, -19,
      20,  -20, 20,  19,  19,  -20, 19,  20,  20,  -20, -19, 20,  -20, 19,  -20, 20,  20,  -19, 19,  19,  -19, 19,  19,
      19,  19,  20,  -20, 20,  20,  -20, 20,  19,  19,  19,  -20, 19,  20,  -20, -20, 19,  19,  19,  19,  20,  -21, 19,
      20,  20,  20,  -20, 19,  19,  -20, -19, 19,  -20, 20,  19,  -19, 19,  19,  -20, -20, 20,  19,  -19, 19,  19,  -20,
      20,  20,  19,  19,  -19, -19, -20, 19,  20,  20,  20,  19,  19,  19,  20,  19,  19,  19,  19,  19,  19,  20,  19,
      19,  19,  20,  20,  -20, 20,  19,  -19, -20, 19,  -18, 20,  19,  -19, 19,  -19, -20, -19, 19,  19,  -20, -19, -19,
      20,  21,  20,  20,  -19, -20, 20,  20,  -20, 20,  -19, -19, 19,  19,  -19, -19, 20,  20,  -20, 19,  20,  20,  -20,
      19,  19,  -19, 20,  20,  -20, -20, -20, -19, -19, 19,  20,  20,  19,  19,  19,  20,  19,  -20, -20, 19,  18,  19,
      19,  20,  19,  -20, -20, 20,  19,  -20, -19, 19,  19,  -19, 20,  19,  -20, 19,  -20, 20,  -19, 19,  -19, -20, 19,
      19,  20,  20,  -20, -20, -20, -19, 20,  19,  20,  20,  20,  20,  19,  -19, 18,  19,  -19, 19,  19,  -20, 20,  20,
      -20, -20, -19, 19,  -20, 20,  20,  -19, 19,  20,  19,  -19, 19,  19,  19,  19,  20,  -20, -20, 19,  -19, -20, -20,
      20,  20,  20,  -20, 20,  -19, 19,  20,  19,  -20, -20, 19,  -20, -19, -20, 20,  21,  19,  -20, -19, 19,  19,  20,
      19,  -19, -20, 20,  -21, -20, -20, 20,  20,  19,  -19, -19, -19, 19,  19,  19,  -20, -20, 20,  -19, -18, -20, 19,
      20,  -20, 19,  -20, -19, 19,  19,  20,  -20, -19, 19,  -19, -19, -19, -20, -19, 19,  -19, -19, -19, -19, -19, -19,
      19,  -20, 20,  -20, 19,  -20, -19, 19,  -20, -19, 20,  19,  20,  -19, -19, -20, 20,  20,  20,  19,  -21, -20, -19,
      19,  -19, 20,  -19, 20,  20,  19,  19,  19,  19,  20,  20,  20,  -20, 20,  19,  19,  20,  -19, 19,  -19, -20, 20,
      19,  19,  20,  20,  19,  20,  -20, -19, 20,  -20, 19,  19,  19,  20,  19,  19,  19,  20,  20,  20,  -19, -19, 20,
      19,  20,  20,  20,  -19, 19,  -20, -19, 19,  20,  19,  -19, 20,  -19, -19, 19,  -19, -20, 19,  -20, 20,  19,  19,
      20,  20,  -19, 19,  20,  20,  -19, 19,  -19, 20,  19,  19,  20,  19,  20,  20,  19,  20,  20,  20,  19,  20,  19,
      19,  19,  20,  20,  20,  19,  19,  20,  19,  19,  19,  20,  20,  20,  19,  20,  20,  19,  19,  19,  19,  20,  19,
      20,  19,  19,  20,  19,  19,  19,  19,  19,  19,  19,  19,  20,  19,  19,  19,  19,  20,  20,  20,  20,  19,  20,
      19,  19,  20,  19,  20,  19,  20,  20,  20,  19,  18,  20,  -19, 20,  -20, 19,  -20, -20, 20,  20,  20,  20,  20,
      20,  19,  20,  20,  127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
      127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
      127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, -20, 20,  -19, -19, -20, 20,  19,  20,  -20,
      -20, -20, 19,  -19, 20,  -20, -20, -20, -19, -19, -20, 19,  -20, -20, 20,  19,  -20, 19,  19,  20,  19,  -20, -19,
      19,  18,  19,  -19, -20, 20,  19,  -19, 20,  19,  21,  -20, 19,  -20, 20,  20,  19,  -20, 19,  -19, 20,  -20, 19,
      -19, -20, -20, -20, 19,  -19, 19,  19,  -19, 20,  -20, 19,  19,  20,  -19, -20, -20, 20,  20,  19,  -19, 19,  19,
      -19, 21,  19,  -20, -19, -19, 19,  19,  20,  19,  -19, -19, 20,  -19, -19, -21, -19, 19,  -19, -19, -19, 20,  -19,
      -20, -19, 20,  -19, 19,  -20, 20,  20,  20,  -20, 20,  21,  20,  -20, -20, -20, -19, 20,  19,  -20, -19, -19, 18,
      -20, -20, 19,  -18, 19,  -19, 20,  20,  -20, 20,  -20, -19, 20,  -19, 19,  -19, -20, -19, 20,  19,  20,  -19, 20,
      -20, 19,  19,  -19, -20, -20, -19, 19,  20,  20,  20,  20,  -19, 20,  19,  -19, 20,  18,  19,  19,  -20, 20,  21,
      -20, -19, 20,  -19, -19, 19,  19,  19,  -19, 20,  -19, -19, -19, 19,  20,  20,  20,  -19, -21, 20,  -20, -21, 19,
      -19, -18, 20,  19,  19,  -20, 20,  -19, -19, -19, 20,  20,  20,  -20, 19,  20,  20,  -19, 19,  -19, 20,  -20, -20,
      20,  -20, -19, 19,  20,  -20, 20,  19,  -20, -20, 19,  -19, -20, -19, -20, 19,  20,  20,  20,  -19, 20,  19,  19,
      20,  -19, -21, 19,  20,  -20, -19, 19,  -20, -19, 19,  -20, -20, 20,  -20, 20,  -20, -20, -19, 19,  -20, 19,  -20,
      -19, 20,  20,  -20, 20,  21,  -19, -19, -20, -20, 20,  -19, 20,  -19, -20, 20,  20,  -20, 20,  20,  20,  20,  -19,
      -18, -19, 19,  -20, 20,  -19, -20, 19,  -20, 19,  -20, 19,  19,  19,  19,  -20, 20,  19,  19,  -20, 20,  -19, -19,
      -19, -20, -19, 20,  -19, -20, -19, 20,  20,  19,  -19, -19, 19,  20,  -19, 19,  -20, 19,  -19, 20,  -19, 20,  -19,
      19,  19,  19,  19,  -19, -19, 18,  -20, -20, -20, 19,  -19, 21,  -20, -20, -20, 20,  -19, 20,  19,  -20, 19,  19,
      -20, 20,  -19, 19,  -20, -20, -20, 20,  -20, -18, 20,  -19, -20, 20,  19,  19,  -19, -20, 20,  -19, 19,  -19, 19,
      -20, 19,  19,  -20, -20, 19,  -20, -19, 20,  19,  19,  19,  -20, 20,  -19, -20, 19,  -20, -20, -20, 19,  -20, 19,
      20,  -19, 19,  -20, -20, 20,  -19, -19, 20,  19,  -19, 19,  19,  20,  -20, 19,  20,  19,  -19, -19, 20,  -19, 19,
      -19, 20,  20,  19,  20,  20,  19,  19,  -20, 19,  -20, 20,  19,  19,  -20, 19,  19,  -20, -18, -20, 19,  19,  19,
      19,  19,  20,  -19, 20,  -19, -20, -20, -20, 19,  -20, 20,  19,  -19, 19,  -19, -19, 20,  19,  18,  -20, 20,  -19,
      19,  -20, -20, 20,  -19, -19, -19, 20,  20,  -20, 20,  20,  -20, -19, -19, -20, 20,  19,  19,  -19, -20, -20, 19,
      -19, -20, 20,  19,  -20, -19, 19,  20,  20,  -19, -19, -19, -20, -19, 20,  19,  -21, 20,  19,  20,  20,  19,  20,
      20,  -20, -19, -19, -19, -20, -19, -19, 20,  -19, 19,  -19, -20, -20, -19, -20, 20,  20,  20,  -20, 20,  -19, -19,
      20,  -20, 19,  19,  20,  -19, -19, -19, -19, 19,  20,  -20, -20, 19,  -19, -19, -19, -19, 18,  19,  19,  19,  19,
      20,  20,  -20, 19,  20,  19,  19,  -20, 19,  20,  19,  19,  20,  20,  19,  -19, 20,  -19, -19, -20, 20,  20,  20,
      -20, -20, 20,  20,  -20, 19,  -20, -19, -20, -20, 20,  19,  19,  -21, 20,  -19, -20, -20, 20,  19,  -20, 20,  -20,
      -20, 20,  -20, -20, 20,  19,  -20, 19,  -19, -20, 20,  -19, 20,  -19, 20,  20,  -19, 20,  19,  19,  19,  20,  20,
      19,  19,  -20, 19,  -20, -19, 20,  -20, -19, -19, 20,  19,  -19, 20,  20,  -19, 19,  20,  20,  19,  19,  21,  -19,
      -19, 20,  19,  20,  19,  -20, 19,  19,  20,  -19, 19,  -19, -20, 20,  19,  -20, 19,  19,  -18, 19,  19,  19,  -19,
      -19, -19, -19, 20,  20,  -20, 19,  20,  18,  -20, 19,  -20, -20, 20,  -19, 19,  -20, -19, 20,  20,  20,  -19, -20,
      19,  19,  20,  20,  20,  -20, -20, -20, 20,  20,  -19, -20, -20, -20, -20, -19, 19,  -19, -20, -19, 20,  -20, -19,
      -20, 20,  -20, -20, 19,  20,  -19, 20,  -19, -19, 19,  19,  -19, 19,  20,  -19, 19,  -19, -19, 20,  -19, -19, 20,
      -20, 19,  -18, 20,  19,  -20, 19,  19,  -20, -19, 19,  19,  -20, -19, 21,  -19, -20, -20, 20,  19,  -20, -19, -19,
      -20, 19,  -20, -20, -20, 20,  19,  19,  20,  -20, 19,  20,  19,  -19, 19,  -19, -19, 20,  19,  -19, -20, 18,  -19,
      -19, 19,  -19, 19,  20,  19,  -20, -19, 19,  -19, 20,  20,  -20, 20,  19,  -19, -19, 20,  20,  -20, -19, 18,  -20,
      -20, 20,  20,  20,  19,  -19, 19,  20,  -20, -20, 19,  20,  -20, 19,  -20, -20, 20,  19,  19,  -20, -20, 19,  20,
      -20, -19, 20,  20,  19,  19,  19,  -20, -20, 20,  20,  -20, -21, 19,  -20, 19,  19,  19,  -20, 19,  -19, 19,  -20,
      -20, 20,  19,  19,  -20, -20, 20,  -20, -19, 20,  19,  -20, -20, 19,  19,  -19, -20, 19,  20,  20,  -19, 19,  19,
      19,  -19, -20, -19, 19,  20,  -19, 19,  19,  -19, 19,  20,  -19, 20,  -19, -20, 19,  19,  -19, 20,  -19, -20, 20,
      19,  19,  19,  -20, 20,  20,  19,  -18, 19,  19,  -20, 20,  -20, -19, 20,  19,  20,  20,  -18, 19,  -20, 20,  19,
      -19, 19,  19,  20,  -21, -20, -19, 19,  -19, 20,  -20, -19, 18,  19,  19,  -19, 20,  -19, -20, 19,  -20, -20, -19,
      19,  20,  19,  -19, -20, -21, 20,  20,  19,  19,  19,  -20, 20,  -19, -19, 19,  20,  19,  -20, 20,  20,  20,  -20,
      20,  20,  19,  -20, 19,  20,  19,  20,  -20, -19, -20, 19,  19,  19,  -20, -19, 20,  20,  -20, -20, 19,  -20, 19,
      -19, -19, -19, 20,  19,  -20, 20,  19,  -19, -19, -20, 19,  20,  -20, -20, -19, -19, 19,  20,  19,  19,  19,  19,
      21,  19,  -19, -20, 19,  19,  20,  20,  -19, 20,  20,  19,  -18, -19, 20,  20,  19,  19,  -19, 19,  -20, -19, -19,
      -19, -20, -20, -19, -19, 19,  20,  -19, -20, 20,  20,  20,  -19, 20,  20,  20,  -19, -20, -20, -20, -20, -21, -20,
      -20, -20, -19, -20, -19, -21, 19,  -19, 21,  20,  -20, -19, -20, -20, -20, -19, 20,  -20, -20, 20,  19,  20,  -19,
      20,  -19, 19,  19,  19,  20,  -20, 19,  20,  19,  20,  -19, 19,  -19, 19,  -19, 19,  20,  20,  -19, -20, -20, 19,
      20,  -19, -19, 19,  19,  19,  -19, 19,  19,  -20, -20, 20,  20,  19,  20,  -20, -19, 20,  -19, -20, 19,  19,  20,
      -19, -20, -20, 19,  -19, -19, -20, -19, 19,  -19, 20,  20,  -19, 20,  20,  -20, 18,  19,  20,  -19, -19, -19, -20,
      -20, 19,  -19, 19,  -20, 19,  -20, 19,  -19, -20, -19, 19,  -20, 21,  20,  19,  19,  19,  -19, 20,  -20, -19, -20,
      20,  -19, 20,  -20, 18,  -19, -20, -20, -19, -20, -19, 19,  -21, 19,  -19, -20, -19, -20, -19, 20,  -19, 20,  -19,
      -19, -20, -20, 19,  20,  -20, -19, -19, 20,  -19, -19, 19,  -20, 20,  19,  19,  19,  19,  19,  -20, -19, -19, 20,
      -20, 19,  -20, -19, -20, -20, -20, -20, 20,  19,  20,  -20, 20,  -19, 19,  19,  19,  20,  19,  20,  19,  19,  -19,
      19,  -19, -19, 21,  20,  -20, 19,  20,  19,  -19, 20,  -20, 20,  -19, -19, 20,  19,  -19, -19, -21, -20, 19,  -19,
      20,  -19, -19, -19, -19, -20, -19, -19, -20, 20,  19,  19,  -20, -19, 19,  -19, 20,  -20, -19, 19,  18,  -19, 19,
      -20, 20,  -19, 19,  -19, -20, 19,  -20, -20, 19,  20,  -20, -19, -20, -20, 19,  20,  20,  20,  -19, 19,  20,  20,
      -19, 20,  -19, -19, -20, 20,  20,  19,  20,  -19, -20, -19, -20, 20,  19,  -20, -20, -19, 20,  -19, -19, -20, -19,
      -19, 19,  -19, 19,  19,  -20, 19,  -19, -20, 19,  19,  19,  19,  -20, -19, -19, -19, 21,  19,  -19, 19,  -20, 20,
      -20, -20, 20,  -20, -20, -20, -19, -20, -20, -19, 19,  -21, -20, 20,  20,  -19, 20,  -20, 19,  -18, -20, -20, -20,
      20,  -20, 20,  20,  -18, 19,  20,  20,  19,  20,  19,  20,  20,  19,  -19, -19, 19,  20,  19,  -19, -20, -19, -20,
      20,  -19, -18, 19,  -19, 20,  -20, -19, -20, -20, 20,  19,  19,  19,  19,  -19, -21, 19,  -20, 20,  -21, -20, 20,
      19,  -20, -20, 20,  20,  -19, -19, -19, -19, 20,  19,  19,  -20, 19,  -19, -20, 19,  20,  -20, 19,  20};

  // int ret = srsran_ldpc_decoder_decode_crc_c(decoder, rm_buffer, q.temp_cb, n_llr, crc_tb);
  auto start = std::chrono::high_resolution_clock::now();
  int  ret   = decode_c_avx2long(decoder, rm_buffer, q.temp_cb, n_llr, crc_tb);
  auto end   = std::chrono::high_resolution_clock::now();
  std::cout << "Decoding time: " << std::chrono::duration_cast<std::chrono::microseconds>(end - start).count() << " us"
            << std::endl;
  if (ret < SRSRAN_SUCCESS) {
    printf("Error decoding CRC\n");
    return -1;
  }

  uint8_t temp_cb_expected[] = {
      0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1,
      1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1,
      0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
      1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1,
      1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0,
      1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0,
      1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0,
      1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1,
      0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1,
      0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0,
      0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1,
      1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0};

  bool decode_error = false;
  for (uint32_t i = 0; i < 824; i++) {
    if (q.temp_cb[i] != temp_cb_expected[i]) {
      printf("Error decoding CRC\n");
      decode_error = true;
      return -1;
    }
  }
  if (!decode_error) {
    printf("CRC decoded successfully\n");
  }
}